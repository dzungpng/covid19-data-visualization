{"version":3,"sources":["../external \"Cesium\"","Images/subtitle2.gif","Data/data_total.czml","Data/data_deaths.czml","Data/data_total_pm.czml","Data/data_deaths_pm.czml","Pages/Home.js","Pages/Visualization.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cesium","Home","useState","showModal","setShowModal","className","size","data-tip","data-for","style","marginTop","marginLeft","maxWidth","onClick","color","id","place","effect","src","Subtitle","width","height","alt","to","textDecoration","show","onClose","closeOnBlur","Content","imageryProvider","BingMapsImageryProvider","url","key","process","mapStyle","BingMapsStyle","AERIAL_WITH_LABELS","Visualization","Ion","defaultAccessToken","showTotalCases","setShowTotalCases","showTotalDeaths","setShowTotalDeaths","showTotalCasesPM","setShowTotalCasesPM","showTotalDeathsPM","setShowTotalDeathsPM","customLatitude","setCustomLatitude","customLongitude","setCustomLongitude","position","zIndex","top","left","name","onChange","e","target","checked","Column","placeholder","value","parseFloat","isNaN","wordSpacing","right","bottom","data","totalCases","totalDeaths","totalCasesPM","totalDeathsPM","duration","destination","Cartesian3","fromDegrees","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e853907.chunk.js","sourcesContent":["module.exports = Cesium;","module.exports = __webpack_public_path__ + \"static/media/subtitle2.94c01f5d.gif\";","module.exports = __webpack_public_path__ + \"static/media/data_total.faf481f8.czml\";","module.exports = __webpack_public_path__ + \"static/media/data_deaths.b55ee623.czml\";","module.exports = __webpack_public_path__ + \"static/media/data_total_pm.af0b37e2.czml\";","module.exports = __webpack_public_path__ + \"static/media/data_deaths_pm.dd7f7718.czml\";","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport ReactTooltip from 'react-tooltip';\n\nimport Hero from 'react-bulma-components/lib/components/hero'\nimport Container from 'react-bulma-components/lib/components/container'\nimport Button from 'react-bulma-components/lib/components/button'\nimport Modal from 'react-bulma-components/lib/components/modal'\n\nimport Subtitle from '../Images/subtitle2.gif'\nimport {\n  Compass\n} from 'react-feather'\n\n\nexport default function Home() {\n  const [showModal, setShowModal] = useState(false)\n\n  return (\n    <div>\n      <Hero className='main-background' size='fullheight'>\n        <Button data-tip data-for='helpTip' style={{ marginTop: '4%', marginLeft: '4%', maxWidth: '5%' }} className='is-transparent-more is-text' onClick={() => setShowModal(true)}>\n          <Compass size={32} color='white' />\n        </Button>\n        <ReactTooltip id='helpTip' place='bottom' effect='solid'>\n          About the App\n        </ReactTooltip>\n        <Container style={{ marginTop: '2%', marginLeft: '18%' }}>\n          <h1 style={{ color: 'white' }} className='large'>COVID-19 <br /> 3D Data Exploration</ h1>\n          <img src={Subtitle} style={{ width: '50%', height: 'auto', marginTop: '-5%', marginLeft: '-3%' }} alt='' />\n          <br />\n          <Link to='/visualization' style={{textDecoration: 'none'}}>\n            <Button className='is-info is-rounded' style={{ marginTop: '5%', width: '200px' }}>\n              Explore the Data\n            </Button>\n          </Link>\n        </Container>\n      </Hero>\n      <Modal\n        show={showModal}\n        onClose={() => setShowModal(false)}\n        closeOnBlur={true}\n      >\n        <Modal.Content style={{ color: 'white' }}>\n          <h1>ABOUT THE PROJECT</h1>\n          <h2>3D Data Visualization</h2>\n          <p>Currently there are numerous websites and tools used to visualize COVID-19 data. However, there are few of which utilize 3D graphics. The goal of this project is to show the power of 3D data visualization and the unique way it can tell the story of the COVID-19 pademic. While viewing the data, users are able to interact with the data and the world itself. There is a component of time, which enhances the way the data is displayed.</p>\n\n          <h2>Technologies Used</h2>\n          <p><b>CesiumJS: </b> Cesium is a powerful open-source Javascript library for creating world-class, high-performant 3D maps. The base of the project utilizes this tool, which enables for a unique data format called czml to show time-dependent geospatial data.</p>\n          <p><b>ReactJS: </b> The frontend of the project is done entirely in React with Bulma as the CSS framework.</p>\n        </Modal.Content>\n      </Modal>\n    </div>\n  )\n}","import React, {useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport { Viewer, CzmlDataSource, ImageryLayer, CameraFlyTo } from \"resium\"\nimport { Ion, BingMapsImageryProvider, BingMapsStyle, Cartesian3 } from 'cesium'\n// import totalCases from '../Data/small_data_total.czml'\n// import totalDeaths from '../Data/small_data_deaths.czml'\n// import totalCasesPM from '../Data/small_data_total_pm.czml'\n// import totalDeathsPM from '../Data/small_data_deaths_pm.czml'\nimport totalCases from '../Data/data_total.czml'\nimport totalDeaths from '../Data/data_deaths.czml'\nimport totalCasesPM from '../Data/data_total_pm.czml'\nimport totalDeathsPM from '../Data/data_deaths_pm.czml'\n\nimport {\n  ArrowLeftCircle,\n  Compass\n} from 'react-feather'\nimport ReactTooltip from 'react-tooltip';\n\nimport Box from 'react-bulma-components/lib/components/box'\nimport Columns from 'react-bulma-components/lib/components/columns'\nimport Modal from 'react-bulma-components/lib/components/modal'\nimport Button from 'react-bulma-components/lib/components/button'\nimport { Field, Control, Label, Input, Checkbox} from 'react-bulma-components/lib/components/form';\n\nconst imageryProvider = new BingMapsImageryProvider({\n  url: 'https://dev.virtualearth.net',\n  key: process.env.REACT_APP_BING_MAP_API_KEY,\n  mapStyle: BingMapsStyle.AERIAL_WITH_LABELS\n})\n\nexport default function Visualization() {\n  Ion.defaultAccessToken = process.env.REACT_APP_CESIUM_API_KEY\n  \n  const [showTotalCases, setShowTotalCases] = useState(true)\n  const [showTotalDeaths, setShowTotalDeaths] = useState(false)\n  const [showTotalCasesPM, setShowTotalCasesPM] = useState(false)\n  const [showTotalDeathsPM, setShowTotalDeathsPM] = useState(false)\n\n  const [customLatitude, setCustomLatitude] = useState(35)\n  const [customLongitude, setCustomLongitude] = useState(104)\n  const [showModal, setShowModal] = useState(true)\n\n  const toolBoxStyle = {\n    width: '20%',\n    color: 'white',\n    top: '350px',\n    left: '75%',\n    zIndex: 2,\n    position: 'relative'\n  }\n\n  function onChangeLatitude(value) {\n    if (isNaN(value)) {\n      setCustomLatitude(0)\n    } else {\n      setCustomLatitude(value)\n    }\n  }\n\n  function onChangeLongitude(value) {\n    if (isNaN(value)) {\n      setCustomLongitude(0)\n    } else {\n      setCustomLongitude(value)\n    }\n  }\n\n\n  return (\n    <div>\n      <Link to='/'>\n        <Button \n          data-tip data-for='home'\n          style={{ marginTop: '4%', marginLeft: '4%', maxWidth: '5%', position: 'absolute', zIndex: 3}} \n          className='is-transparent-more is-text'\n        >\n          <ArrowLeftCircle size={32} color='white' />\n        </Button>\n        <ReactTooltip id='home' place='bottom' effect='solid'>\n          Go Back\n        </ReactTooltip>\n      </Link>\n        \n      <Modal\n        show={showModal}\n        onClose={() => setShowModal(false)}\n        closeOnBlur={true}\n      >\n        <Modal.Content style={{color: 'white', width: '70%',}}>\n          <h1>NAVIGATING THE APP UI</h1>\n          <h2>Cesium Widgets</h2>\n          <h3>Navigation tools:</h3>\n          Location - Topright corner<br/>\n          Functions - Tips on how to navigate the globe, zoom in and out, global zoom, \"fly\" to a specific location on the map.<br/>\n          <h3>Timeline tools:</h3>\n          Location - Bottom of screen<br/>\n          Functions - Play/pause button for animation, timeline slider, adjusting animation speed.<br/>\n\n          <h2>Custom Toolbar</h2>\n          Show/hide certain types of data, fly to a location with known latitude and longitude, legends.\n\n          <h1>INSTRUCTIONS TO GET STARTED</h1>\n          Feel free to explore the data in whichever way you would like, but here is a suggestion for starting:<br />\n          1. Click to show/hide the dataset that interests you in the Custom Toolbar.<br />\n          2. Press the Play |>| button at the bottom left corner of the screen to start the animation. <br />\n          3. Watch as the data begins to show up over time on the global. Use your mouse controls to pan around (for mouse control tips, click on the question mark at the top right corner of the screen).\n          4. Click on the circles to learn more about its prepresented country's COVID-19 situation.\n\n        </Modal.Content>\n      </Modal>\n      <Box className='is-transparent' style={toolBoxStyle}>\n        <Button \n          data-tip data-for='help'\n          className='is-transparent-more is-text' \n          style={{ marginTop: '1%', marginLeft: '80%', maxWidth: '40%' }} \n          onClick={() => setShowModal(true)}\n        >\n          <Compass size={28} color='black' />\n        </Button>\n        <ReactTooltip id='help' place='top' effect='solid'>\n          Instructions\n        </ReactTooltip>\n        <Field>\n          <Label>Show/Hide Data</Label>\n            <Control>\n              <Checkbox \n                name=\"totalCases\" \n                onChange={(e) => setShowTotalCases(e.target.checked)} \n                checked={showTotalCases}\n              >\n                Total Cases\n              </Checkbox>\n              <br />\n              <Checkbox \n                name=\"totalDeaths\" \n                onChange={(e) => setShowTotalDeaths(e.target.checked)} \n                checked={showTotalDeaths}\n              >\n                Total Deaths\n              </Checkbox>\n            </Control>\n        </Field>\n        <Field>\n            <Control>\n              <Checkbox \n                name=\"totalCasesPM\" \n                onChange={(e) => setShowTotalCasesPM(e.target.checked)} \n                checked={showTotalCasesPM}\n              >\n                Total Cases/Million\n              </Checkbox>\n              <br />\n              <Checkbox \n                name=\"totalDeaths\" \n                onChange={(e) => setShowTotalDeathsPM(e.target.checked)} \n                checked={showTotalDeathsPM}\n              >\n                Total Deaths/Million\n              </Checkbox>\n            </Control>\n        </Field>\n        <Field>\n          <Label>Custom Location</Label>\n          <Columns>\n            <Columns.Column>\n              <Control>\n                <Input \n                  placeholder=\"Latitude (ex. 70)\" \n                  style={{maxWidth: '90%'}} \n                  value={customLatitude}\n                  onChange={(e) => onChangeLatitude(parseFloat(e.target.value))}\n                />\n              </Control>\n            </Columns.Column>\n            <Columns.Column>\n              <Control>\n                <Input \n                  placeholder=\"Longitude (ex. 20)\" \n                  style={{maxWidth: '90%'}} \n                  value={customLongitude}\n                  onChange={(e) => onChangeLongitude(parseFloat(e.target.value))}\n                />\n              </Control>\n            </Columns.Column>\n          </Columns>\n        </Field>\n        \n        <Label style={{marginTop: '3%'}}>Legend (# of People)</Label>\n        <div className='gradient'></div>\n        <p style={{wordSpacing: '40px'}}>50 200 2000 3000+</p>\n      </Box>\n      <Viewer style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 1\n      }}>\n        <ImageryLayer imageryProvider={imageryProvider} />\n        <CzmlDataSource data={totalCases} show={showTotalCases}/>\n        <CzmlDataSource data={totalDeaths} show={showTotalDeaths}/>\n        <CzmlDataSource data={totalCasesPM} show={showTotalCasesPM}/>\n        <CzmlDataSource data={totalDeathsPM} show={showTotalDeathsPM}/>\n        <CameraFlyTo duration={5} destination={Cartesian3.fromDegrees(customLongitude, customLatitude, 6000000)} />\n      </Viewer>\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\n\nimport Home from './Pages/Home'\nimport Visualization from './Pages/Visualization'\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/visualization' exact component={Visualization} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}